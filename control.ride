{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract for Price Oracles and Emergency Oracles of Defo Neutrino Protocol
#

#-------------------Functions----------------------

func getNumberByAddressAndKey(address: String, key: String) = {
    getInteger(addressFromStringValue(address), key).valueOrElse(0)
}

func getStringByAddressAndKey(address: Address, key: String) = {
     getString(address, key).valueOrElse("")
}

#-------------------Constants---------------------------

#-------------------Constructor-------------------------

#-------------------Keys---------------------------------
func keyFactory() = {"%s__factory"}

func keyPrice(currencyCode: String) = "%s%s__price__" + currencyCode
func keyLastHeight(currencyCode: String) = "%s%s__lastHeight__" + currencyCode
func keyPriceByHeight(currencyCode: String, h: Int) = "%s%s%d__priceByHeight__" + currencyCode + "__" + h.toString()
func keyIdx(currencyCode: String) = "%s%s__idxCurrent__" + currencyCode
func keyIdx2Height(currencyCode: String, idx: Int) = "%s%s%d__idx2Height__" + currencyCode + "__" + idx.toString()
func keyHeight2Idx(currencyCode: String, h: Int) = "%s%s%d__height2Idx__" + currencyCode + "__" + h.toString()

func keyIsBlocked() = "%s__isBlocked"
func keyIsBlockedSender() = "%s%s__isBlocked__sender"
func keyIsBlockedReason() = "%s%s__isBlocked__reason"
func keyOracles() = "%s%s__config__oracles"
func keyBlackSwarmPrice(h: Int) = "%s%s%d__isBlocked__blackSwarmPrice__" + h.toString()

### Factory API
let factoryAcc = this.getString(keyFactory()).valueOrErrorMessage("No config at this=" + this.toString() + " for key=" + keyFactory())
                 .addressFromStringValue()

func keyFactoryAssetCfg(assetAddressStr: String) = {"%s%s%s__defoAsset__" + assetAddressStr + "__config"}
func keyFactoryDefoAddressByAssetCode(assetCode: String) = {"%s%s%s__defoAsset__" + assetCode + "__addressByAssetCode"}

let IdxDefoAssetCode = 1
let IdxDefoAssetId = 2
let IdxDefoAssetStatus = 3
let IdxPriceDecimals = 4
let IdxBaseAssetId = 5
let IdxOverCollateralPercent = 6
let IdxMinInitPool = 7
let IdxPriceOracleAddress = 8
let IdxMinBuyPayment = 9
let IdxMinSellPayment = 10
let IdxBuyLockInterval = 11
let IdxSellLockInterval = 12
let IdxBuyFeePercent = 13
let IdxSellFeePercent = 14

func factoryReadAssetCfgByAddress(assetAddressStr: String) = {
  factoryAcc.getString(keyFactoryAssetCfg(assetAddressStr))
      .valueOrErrorMessage("No config at factory=" + factoryAcc.toString() + " for key=" + keyFactoryAssetCfg(assetAddressStr))
      .split("__")
}

func factoryReadAssetCfgByCode(assetCode: String) = {
  let assetAddressStr = factoryAcc.getString(keyFactoryDefoAddressByAssetCode(assetCode))
      .valueOrErrorMessage("No config at factory=" + factoryAcc.toString() + " for key=" + keyFactoryDefoAddressByAssetCode(assetCode))
  (assetAddressStr, factoryReadAssetCfgByAddress(assetAddressStr))
}


### this API
func readPriceByHeight(currencyCode: String, h: Int) = {
  this.getInteger(keyPriceByHeight(currencyCode, h)).valueOrElse(0)
}

#-------------------Global vars-------------------------

let isBlocked = this.getBoolean(keyIsBlocked()).valueOrElse(false)

let minPricesCount = 3
let percentPriceOffset = 5

let pubKeyOraclesList = this.getString(keyOracles())
      .valueOrErrorMessage("No oracles specified by key=" + keyOracles())
      .split(",")

func findPricesInRange(prices: List[Int]) = {
    let minPercentBound = 90
    let maxPercentBound = 110
    let p0 = prices[0]

    let check0 = if (prices[0] <= 0) then [0] else {
        let p01 = prices[1] * 100 / p0
        let p02 = prices[2] * 100 / p0
        let p03 = prices[3] * 100 / p0
        let p04 = prices[4] * 100 / p0

        let array1 = if(p01 < maxPercentBound && p01 > minPercentBound) then 1::[0] else [0]
        let array2 = if(p02 < maxPercentBound && p02 > minPercentBound) then 2::array1 else array1
        let array3 = if(p03 < maxPercentBound && p03 > minPercentBound) then 3::array2 else array2
        if(p04 < maxPercentBound && p04 > minPercentBound) then 4::array3 else array3
    }

    let check1 = if (check0.size() >= minPricesCount) then check0 else {
        let p1 = prices[1]
        if (p1 <= 0) then [1] else {
            let p10 = prices[0] * 100 / p1
            let p12 = prices[2] * 100 / p1
            let p13 = prices[3] * 100 / p1
            let p14 = prices[4] * 100 / p1

            let array1 = if(p10 < maxPercentBound && p10 > minPercentBound) then 0::[1] else [1]
            let array2 = if(p12 < maxPercentBound && p12 > minPercentBound) then 2::array1 else array1
            let array3 = if(p13 < maxPercentBound && p13 > minPercentBound) then 3::array2 else array2
            if(p14 < maxPercentBound && p14 > minPercentBound) then 4::array3 else array3
        }
    }

    let check2 = if (check1.size() >= minPricesCount) then check1 else {
        let p2 = prices[2]
        if (p2 <= 0) then [2] else {
            let p20 = prices[0] * 100 / p2
            let p21 = prices[1] * 100 / p2
            let p23 = prices[3] * 100 / p2
            let p24 = prices[4] * 100 / p2

            let array1 = if (p20 < maxPercentBound && p20 > minPercentBound) then 0::[2] else [2]
            let array2 = if(p21 < maxPercentBound && p21 > minPercentBound) then 1::array1 else array1
            let array3 = if(p23 < maxPercentBound && p23 > minPercentBound) then 3::array2 else array2
            if(p24 < maxPercentBound && p24 > minPercentBound) then 4::array3 else array3
        }
    }

    let check3 = if (check2.size() >= minPricesCount) then check2 else {
        let p3 = prices[3]
        if (p3 <= 0) then [3] else {
            let p30 = prices[0] * 100 / p3
            let p31 = prices[1] * 100 / p3
            let p32 = prices[2] * 100 / p3
            let p34 = prices[4] * 100 / p3

            let array1 = if (p30 < maxPercentBound && p30 > minPercentBound) then 0::[3] else [3]
            let array2 = if(p31 < maxPercentBound && p31 > minPercentBound) then 1::array1 else array1
            let array3 = if(p32 < maxPercentBound && p32 > minPercentBound) then 2::array2 else array2
            if(p34 < maxPercentBound && p34 > minPercentBound) then 4::array3 else array3
        }
    }

    if (check3.size() >= minPricesCount) then check3 else {
        let p4 = prices[4]
        if (p4 <= 0) then [4] else {
            let p40 = prices[0] * 100 / p4
            let p41 = prices[1] * 100 / p4
            let p42 = prices[2] * 100 / p4
            let p43 = prices[3] * 100 / p4

            let array1 = if (p40 < maxPercentBound && p40 > minPercentBound) then 0::[4] else [4]
            let array2 = if(p41 < maxPercentBound && p41 > minPercentBound) then 1::array1 else array1
            let array3 = if(p42 < maxPercentBound && p42 > minPercentBound) then 2::array2 else array2
            if(p43 < maxPercentBound && p43 > minPercentBound) then 3::array3 else array3
        }
    }
}

func formattingPriceMsg(currencyCode: String, price: Int) = {
    toBytes("WAVESDEFOPREFIX_" + currencyCode + "_" + toString(height) + "_" + toString(price))
}

#-------------------Callable----------------------
# [called by price oracles]
# only price oracles can block smart contract untill another price oracle will unblock it
@Callable(i)
func callEmergencyShutdown(reason: String) = {
    let AutoEmergencyOracleAddress = "3P6Xtn3c24YhMzefWUoeRz63yZQ7vdmEWop"
    let callerAddress = toString(i.caller)
    if (AutoEmergencyOracleAddress != callerAddress) then throw("caller must be one an emergency oracle") else
    [BooleanEntry(keyIsBlocked(), true),
      StringEntry(keyIsBlockedSender(), callerAddress),
      StringEntry(keyIsBlockedReason(), reason)]
}

# [called by price oracles]
@Callable(i)
func finalizeCurrentPrice(currencyCode: String, price1: Int, sign1: ByteVector, price2: Int, sign2: ByteVector, price3: Int, sign3: ByteVector, price4: Int, sign4: ByteVector, price5: Int, sign5: ByteVector) = {
    let price = this.getInteger(keyPrice(currencyCode)).valueOrElse(0)
    let idx = this.getInteger(keyIdx(currencyCode)).valueOrElse(0)

    let currencyCfg = factoryReadAssetCfgByCode(currencyCode)._2
    if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") else
    if (currencyCfg[IdxDefoAssetStatus] != "ISSUED") then throw(currencyCode + " has not been issued yet: status=" + currencyCfg[IdxDefoAssetStatus]) else
    if (readPriceByHeight(currencyCode, height) != 0) then throw("wait next block") else
    if (pubKeyOraclesList[height % 5] != toBase58String(i.callerPublicKey)) then throw("Out of turn finalization: "
             + toString(height) + " block should be finalize by " + pubKeyOraclesList[height % 5]) else

    let prices = [
        if sigVerify_8Kb(formattingPriceMsg(currencyCode, price1), sign1, fromBase58String(pubKeyOraclesList[0])) then price1 else 0,
        if sigVerify_8Kb(formattingPriceMsg(currencyCode, price2), sign2, fromBase58String(pubKeyOraclesList[1])) then price2 else 0,
        if sigVerify_8Kb(formattingPriceMsg(currencyCode, price3), sign3, fromBase58String(pubKeyOraclesList[2])) then price3 else 0,
        if sigVerify_8Kb(formattingPriceMsg(currencyCode, price4), sign4, fromBase58String(pubKeyOraclesList[3])) then price4 else 0,
        if sigVerify_8Kb(formattingPriceMsg(currencyCode, price5), sign5, fromBase58String(pubKeyOraclesList[4])) then price5 else 0
    ]

    let zeroPriceCount = (if (prices[0] == 0) then 1 else 0)
            + (if (prices[1] == 0) then 1 else 0)
            + (if (prices[2] == 0) then 1 else 0)
            + (if (prices[3] == 0) then 1 else 0)
            + (if (prices[4] == 0) then 1 else 0)

    if (zeroPriceCount >= minPricesCount) then throw(minPricesCount.toString() + " prices or more are equals to 0") else

    let pricesInRange = findPricesInRange(prices)
    let priceProvidingCount = pricesInRange.size();

    if (priceProvidingCount < minPricesCount) then throw("Could not finalize price because of big variation: height=" + toString(height)
             + "\n" + pubKeyOraclesList[0]  + "=" + toString(prices[0])
             + "\n" + pubKeyOraclesList[1] + "=" + toString(prices[1])
             + "\n" + pubKeyOraclesList[2] + "=" + toString(prices[2])
             + "\n" + pubKeyOraclesList[3] + "=" + toString(prices[3])
             + "\n" + pubKeyOraclesList[4] + "=" + toString(prices[4])) else

    let sum1 = prices[pricesInRange[0]] + prices[pricesInRange[1]] + prices[pricesInRange[2]]
    let sum2 = if (priceProvidingCount >= 4) then sum1 + prices[pricesInRange[3]] else sum1
    let priceSum = if (priceProvidingCount >= 5) then sum2 + prices[pricesInRange[4]] else sum2
    if (priceProvidingCount >= 6) then throw("Invalid pricesInRange creation") else

    let newPrice = priceSum/priceProvidingCount

    if(price != 0 && (newPrice >= (price + price*percentPriceOffset/100) || newPrice <= (price - price*percentPriceOffset/100))) then {
        let reason = "automatic emergency shutdown because of large price variability"
        [BooleanEntry(keyIsBlocked(), true),
          StringEntry(keyIsBlockedSender(), toString(this)),
          StringEntry(keyIsBlockedReason(), reason),
          IntegerEntry(keyBlackSwarmPrice(height), newPrice)]
    } else {
        let newIdx = idx + 1
        [IntegerEntry(keyPrice(currencyCode), newPrice),
          IntegerEntry(keyLastHeight(currencyCode), height),
          IntegerEntry(keyPriceByHeight(currencyCode, height), newPrice),
          IntegerEntry(keyIdx(currencyCode), newIdx),
          IntegerEntry(keyIdx2Height(currencyCode, newIdx), height),
          IntegerEntry(keyHeight2Idx(currencyCode, height), newIdx)
        ]
    }
}